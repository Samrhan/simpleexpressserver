# This is a basic workflow to help you get started with Actions
name: Build, Push and Deploy Node.js app

env:
  REGISTRY: docker.pkg.github.com # we will push our docker-image to the GitHub packages
  REPO: tfarras/nodejs-deploy/nodejs-image # is the name of our image which will be used to push or pull it
  CONTAINER: nodejs-image # name of the container which will be used to stop or start the container
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  push_to_registry:
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Push to GitHub Packages
        uses: docker/build-push-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ env.REGISTRY }}
          repository: ${{ env.REPO }}
          tag_with_ref: true
  deploy:
    needs: [push_to_registry]
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH connection
        uses: webfactory/ssh-agent@v0.5.1
        with:
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        
      - name: Login to the GitHub Packages Docker Registry
        run: ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "docker login ${{env.REGISTRY}} -u ${{github.actor}} -p ${{secrets.GITHUB_TOKEN}}"

      - name: Pull latest container
        run: |
          ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "docker pull ${{env.REGISTRY}}/${{env.REPO}}:latest"
      - name: Stop deployed container
        continue-on-error: true
        run: |
          ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "docker stop ${{env.CONTAINER}}"
      - name: Remove deployed container
        continue-on-error: true
        run: |
          ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "docker rm ${{env.CONTAINER}}"
      - name: Start docker container
        run: |
          ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "docker run -p 8080:8080 -d --name=${{env.CONTAINER}} ${{env.REGISTRY}}/${{env.REPO}}:latest"
      - name: Logout from the GitHub Packages Docker Registry
        run: ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "docker logout ${{env.REGISTRY}}"
